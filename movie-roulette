#! /usr/bin/env perl

use strict;
use warnings;

use REST::Client;                   # to simplify the api access
use JSON;                           # to process the returned data
use Getopt::Long;                   # for the various program options
use Time::HiRes qw(usleep);         # for the spinner loader

#########
# about #
#########
# a simple command line interface to a jellyfin server
# roulette-style pick a movie or series at random
# then choose to watch it or try again.

### TODO
# - a main function
# - a get more info function?
# - user specified media players (w/ vlc as default)

### to look into
# - if only loading from cache, sometimes REST client fails...

# globals
my (
    $cache_file,    # temporary json dump
    $cache_ttl,     # time to live
    $api_key,       # source from environment
);

# options/globals
my (
    $verbose,
    $server,
    $refresh_cache,
    $item_type,
    $help,
);

# should be in main (TODO)
my (
    $endpoint,
    $response_code,
    $response_content,
    $json,
    $total_count,
    $random_index,
    $item,                  # item is movie or series
    $title,
    $year,
    $input,                 # user in: nothing, y or yes, basically
    $item_id,
    $client,
);

############
# prelim's #
############

# seed the random generator
srand;

### options ###

# opts here to set whether
# - movies or series
# - the server
# - force cache reload
# - debug prints
# - show help and exit

# defaults:

$verbose = 0;
$server = 'http://blue.home:8096';
$item_type = "Movie";                   #"Movie" or "Series"
$refresh_cache = 0;
$help = 0;

GetOptions (
    "verbose|v"     => \$verbose,
    "server|s=s"    => \$server,
    "type|t=s"      => \$item_type,
    "refresh|r"     => \$refresh_cache,
    "help|h"        => \$help,
);

if ($help) {

print <<HELP;
This perl script implements roulette access to a jellyfin server.
A simple command line interface to a jellyfin server. 
Roulette-style generates a movie or series at random from the library.
Then choose to watch it or try again.

    Usage: $0 [options]

The following options are available:
    --help              Produce this output and exit.
    --verbose           Include additional prints.
    --refresh           Force reload of the library cache.
    --server=<host>     The jellyfin server host including port number.
    --type=<media>      Media type, can be movies or series.

HELP
    exit();
}

# checks:

# server should have right form
# basic af: http(s)://something.something
if (!($server =~ m#^https?://.*\..*#)) {        # m for custom deliminator
    die ("invalid server address.");
}
# type should be movie or series (or whatever)...
if ($item_type =~ /^movies?$/i) {
    $item_type = "Movie";
} 
elsif ($item_type =~ /^series$/i) {
    $item_type = "Series";
} 
else {
    die("invalid media format requested.");
}

print "verbose mode on\n" if ($verbose);

### cache config ###

# the location & name of the cache file
$cache_file = "/tmp/jellyfin_roulette_".lc($item_type).".data";

# number of days before refresh
$cache_ttl = 1;

### server access ###

# this will be used in case of downloading a cache
# or polling for series information
# hence initialised here

# get api key from environment
$api_key = $ENV{"JELLYFIN"};

# set-up restful client
$client = REST::Client->new();

print "server = $server\n" if ($verbose);
$client->setHost($server);      

# add identity for authorisation
$client->addHeader('Accept', 'application/json');
$client->addHeader('X-Emby-Token', $api_key);

#############
# load data #
#############

$json = load_cache() unless ($refresh_cache);

unless ($json) {

    print "polling the server\n" if ($verbose);

    # now set the api end point for the request
    $endpoint = "/Items?IncludeItemTypes=$item_type&Recursive=true";

    print "request = $endpoint\n" if ($verbose);

    ################
    # poll the api #
    ################

    # this may take a while
    my $spinner_pid = fork();
    # RECALL: returns undef if error, 0 if child, PID of child if parent
    warn "couldn't fork of loader" unless defined $spinner_pid;

    if ($spinner_pid == 0) {
        my @spin = qw(| / - \\);
        $| = 1;                     # set autoflush
        my $i = 0;
        while (1) {
            print "$spin[$i]\r";
            $i = ($i + 1) % @spin;
            usleep(100_000);        # 100_000
        }
        exit(0);
    }
    # else: back in the parent
    $client->GET($endpoint);
    usleep(1000_000);                       # just while we're testing

    # once we've got the get, kill the loader
    kill 'TERM', $spinner_pid;
    waitpid($spinner_pid, 0);

    $response_code = $client->responseCode();
    print "received response = $response_code\n" if ($verbose);

    if ($response_code == 200) {
        $response_content = $client->responseContent();
        $json = decode_json($response_content);
        save_cache($json);
    }
    elsif ($response_code == 401) {
        print "authorisation issue!\n"
    }
    else {
        print "bad response from server.\n";
    }
}

#################
# get the movie #
#################

$total_count = $json->{TotalRecordCount} // 0;      # (if undef set to zero)

if ($total_count != 0) {
    while (1) {
        $random_index = int(rand($total_count));
        $item = $json->{Items}[$random_index];

        if ($item) {
            $title = $item->{Name} // "unknown";
            $year  = $item->{ProductionYear} // "unknown";

            ### this is it:
            print "$title ($year)\n";
        }

        ### TODO
        # could more info be an option?

        print "\rwatch? [y/N]: ";
        chomp($input = <STDIN>);
        if (($input =~ /^y(es)?$/i)) {

            # check vlc exists or abort now
            check_vlc_installed();

            if ($item_type eq "Movie") {
                # movies are simple, just play 'em

                $item_id = $item->{Id};
                play_video($item_id);
                last;

            }
            elsif ($item_type eq "Series") {
                # if series should ask:
                # first episode or random episode?
                # then after that ask:
                # next ep or another?

                my $ep_num = 0;         # the current episode
                my $episodes_count = get_number_of_episodes($client, $item);

                if ($episodes_count == -1) {
                    warn "error retrieving series information";
                    last;
                }

                if ($verbose) {
                    print "number of episodes: ".$episodes_count."\n";
                }

                while(1) {
                    print "episode = $ep_num/$episodes_count\n" if ($verbose);

                    if ($ep_num == 0) {
                        print "\rep. 1? [y/N]: ";
                        chomp($input = <STDIN>);
                        if (($input =~ /^y(es)?$/i)) {
                            $ep_num = 1;
                        }
                        else {
                            print "\rrandom ep.? [Y/n]: ";
                            chomp($input = <STDIN>);
                            if (($input =~ /^$|^y(es)?$/i)) {
                                $ep_num = int(rand($episodes_count));
                            }
                            else {
                                last;
                            }
                        }
                    }
                    else {
                        print "\rnext ep.? [Y/n]: ";
                        chomp($input = <STDIN>);
                        last unless ($input =~ /^$|^y(es)?$/i);
                        ++$ep_num;
                    }
                    if (defined $ep_num && $ep_num <= $episodes_count){
                        $item_id = get_episode($client, $item, $ep_num);
                        play_video($item_id);
                    }
                    else {
                        print("outta ep's!\n");
                        last;
                    }
                }
            }
        }

        print "\rgo again? [Y/n]: ";
        chomp($input = <STDIN>);
        last unless ($input =~ /^$|y(es)?$/i);
    }
}
else {
    print "no records available!\n";
}

###############
# subroutines #
###############

### poll server for series info ###

sub get_number_of_episodes {
    # given api client and series identifier
    # return the total number of episodes
    # or -1 if there's a problem

    my ($client, $item) = @_;

    my (
        $episodes_count,
        $series_id,
        $endpoint,
        $response_code,
        $data,
    );

    $episodes_count = 0;

    $series_id = $item->{Id};
    $endpoint = "/Items?IncludeItemTypes=Episodes".
                    "&Recursive=true&ParentId=$series_id";

    $client->GET($endpoint);
    $response_code = $client->responseCode();

    if ($response_code == 200) {
        $data = decode_json($client->responseContent());
        $episodes_count = $data->{TotalRecordCount} // 0;
    }
    else {
        print "got bad response: $response_code\n" if ($verbose);
    }

    return int($episodes_count) - 1;
}

sub get_episode {
    # given the series identified
    # return first episodes id

    my ($client, $item, $episode_num) = @_;

    my (
        $start_index,           # $start_index corresponds to episode number
        $series_name,
        $series_id,
        $episodes_endpoint,
        $response_code,
        $episodes_data,
        $episodes,
    );

    if (defined $episode_num && $episode_num > 0) {
        $start_index = $episode_num - 1;
    }
    else {
        $start_index = 0;
    }

    $series_name = $item->{Name};
    $series_id = $item->{Id};

    # this is the endpoint for an episode of a series
    $episodes_endpoint = "/Items?IncludeItemTypes=Episode&Recursive=true".
                                "&ParentId=$series_id&SortBy=SortName".
                                    "&SortOrder=Ascending".
                                        "&StartIndex=$start_index&Limit=1";

    $client->GET($episodes_endpoint);

    $response_code = $client->responseCode();

    if ($response_code == 200) {
        $episodes_data = decode_json($client->responseContent());
        $episodes = $episodes_data->{Items};
        return $episodes->[0]{Id};
    }
    else {
        print "response: $response_code\n";
        warn "couldn't access the server.\n"
    }
}

### video play-back

sub play_video {
    # given the id of an item
    # construct the right url and pass to vlc

    print "playing video\n" if $verbose;

    my ($item_id) = @_;

    my (
        $url,
    );

    print "item id = $item_id\n" if ($verbose);

    $url = "$server/Videos/$item_id/".
                "stream?Static=true&api_key=$api_key";

    print "url = $url\n" if ($verbose);

    # start vlc media player
    if ($verbose) {
        system("vlc", $url);
    }
    else {
        system("bash", "-c", "vlc '$url' >/dev/null 2>&1");
    }
    # when vlc's done, what should we do...
}

sub check_vlc_installed {
    # kill this program if no vlc available

    my (
        $vlc_install,
    );

    chomp($vlc_install = `which vlc 2>/dev/null`);  
    # pipe 2 out since don't care if which fails, just that vlc exists
    print "vlc install found at: $vlc_install\n" if $verbose;
    die("no vlc found!") unless (-x $vlc_install);  
}

### caches

sub load_cache {
    # returns nothing if no recent cache
    # otherwise, the data in json form

    print "loading cache\n" if $verbose;

    my (
        $fh,
        $data,
    );

    return unless (-e $cache_file);

    # check ttl of file:
    return if (-M $cache_file > $cache_ttl);

    open($fh, $cache_file) || return;
    $data = <$fh>;
    close $fh;
    return decode_json($data);
}

sub save_cache {
    # write to file the json data received

    print "saving cache\n" if $verbose;

    my ($data) = @_;

    my (
        $fh,
    );

    open($fh, ">".$cache_file) || warn("failed to create cache!");
    print $fh encode_json($data);
    close $fh;
}
